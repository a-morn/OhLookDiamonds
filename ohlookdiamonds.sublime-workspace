{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"crea",
				"createHud()"
			],
			[
				"hu",
				"hudCont	(num)"
			],
			[
				"ga",
				"gameMouseUp()"
			],
			[
				"ex",
				"exitGameMode()"
			],
			[
				"hud",
				"hudCont	(?)"
			],
			[
				"add",
				"addChild"
			],
			[
				"ca",
				"canvasWidth	(num)"
			],
			[
				"can",
				"canvasHeight	(num)"
			],
			[
				"cre",
				"createRectangle(w, h, color, options)"
			],
			[
				"S",
				"Shape"
			],
			[
				"game",
				"gameClickScreen	(?)"
			],
			[
				"get",
				"getChildAt	(?)"
			],
			[
				"se",
				"selectedCont	(?)"
			],
			[
				"sele",
				"selectedCont	(?)"
			],
			[
				"re",
				"removeAllChildren	(?)"
			],
			[
				"cur",
				"currentTarget"
			],
			[
				"off",
				"off	(?)"
			],
			[
				"pre",
				"pressup	(?)"
			],
			[
				"bg",
				"bgCont	{}"
			],
			[
				"db",
				"dbCurrentEventListeners	{}"
			],
			[
				"y",
				"YOriginPosInGame"
			],
			[
				"rem",
				"removeAllTweens"
			],
			[
				"sca",
				"scaleY	(?)"
			],
			[
				"catzR",
				"catzRocketContainer	(?)"
			],
			[
				"C",
				"CatzRocket	{}"
			],
			[
				"scale",
				"scaleX	(?)"
			],
			[
				"st",
				"state	(str)"
			],
			[
				"set",
				"setValues"
			],
			[
				"sel",
				"selectedCont	(?)"
			],
			[
				"sprite",
				"sprite"
			],
			[
				"ad",
				"addChild	(?)"
			],
			[
				"selec",
				"selectedCont	(?)"
			],
			[
				"gra",
				"graphics"
			],
			[
				"gr",
				"graphic	(?)"
			],
			[
				"sl",
				"selectBox	{}"
			],
			[
				"le",
				"levelViewScale	(num)"
			],
			[
				"dra",
				"dragBox(evt)"
			],
			[
				"leve",
				"levelView	(?)"
			],
			[
				"dr",
				"drawSelectBox()"
			],
			[
				"sta",
				"stageX"
			],
			[
				"len",
				"length"
			],
			[
				"levelVi",
				"levelViewScale	(num)"
			],
			[
				"ge",
				"getElementById"
			],
			[
				"bgCo",
				"bgCoordinates	{}"
			],
			[
				"cu",
				"currentAnimation	(?)"
			],
			[
				"Y",
				"YOriginPosInGame	(num)"
			],
			[
				"lev",
				"levelLength	(num)"
			],
			[
				"he",
				"height"
			],
			[
				"W",
				"width"
			],
			[
				"s",
				"sort(compare?)"
			],
			[
				"bird",
				"bird	(?)"
			],
			[
				"levelE",
				"levelEditCanvas"
			],
			[
				"level",
				"levelString	(str)"
			],
			[
				"font",
				"font-family"
			],
			[
				"gre",
				"greatDiamond"
			],
			[
				"grea",
				"greatCycle"
			],
			[
				"di",
				"diCont()"
			],
			[
				"e",
				"easy	{}"
			],
			[
				"Tr",
				"TrackParts	{}"
			],
			[
				"for",
				"for	for (…) {…} (Improved Native For-Loop)"
			],
			[
				"co",
				"constellationCont	(?)"
			],
			[
				"bi",
				"birdCont"
			],
			[
				"ce",
				"createBird"
			],
			[
				"creat",
				"createDiamond"
			],
			[
				"loo",
				"loopText"
			],
			[
				"Pre",
				"pressMove"
			],
			[
				"c",
				"createjs"
			],
			[
				"b",
				"beginFill"
			],
			[
				"Sp",
				"spriteSheetData"
			],
			[
				"a",
				"aTrackPartsJSON"
			],
			[
				"fg",
				"fgGround"
			],
			[
				"g",
				"groundClone"
			],
			[
				"pr",
				"progressBar"
			],
			[
				"R",
				"mouseRocket"
			],
			[
				"q",
				"queue"
			],
			[
				"create",
				"createClickableSprite"
			],
			[
				"scaleY",
				"mScaleY"
			],
			[
				"mo",
				"mouseoverBitmap"
			],
			[
				"org",
				"orgX"
			],
			[
				"ti",
				"timmy"
			],
			[
				"t",
				"timmy"
			],
			[
				"o",
				"onlooker"
			],
			[
				"Click",
				"ClickableSprite"
			],
			[
				"proto",
				"prototype"
			],
			[
				"h",
				"heightOffset"
			],
			[
				"sc",
				"xScreenPosition"
			],
			[
				"OutOf",
				"OutOfFuelUpsideDown"
			],
			[
				"ro",
				"rotation"
			],
			[
				"cat",
				"catzRocket"
			],
			[
				"ha",
				"hasActiveTweens"
			],
			[
				"mousec",
				"mouseCatz"
			],
			[
				"hou",
				"houseName"
			],
			[
				"Out",
				"OutOfFuelUpsideDown"
			],
			[
				"Sl",
				"SlammerReady"
			],
			[
				"sE",
				"SecondDownloop"
			],
			[
				"CA",
				"catzState"
			],
			[
				"Sec",
				"SecondUploop"
			],
			[
				"T",
				"TerminalVelocity"
			],
			[
				"d",
				"diamondFuel"
			],
			[
				"F",
				"OutOfFuel"
			],
			[
				"catz",
				"catzState"
			],
			[
				"sLA",
				"SlammerReady"
			],
			[
				"catzS",
				"catzStateEnum"
			],
			[
				"Se",
				"SecondUploop"
			],
			[
				"mute",
				"muteButton"
			],
			[
				"hoboHou",
				"hoboCatHouse"
			],
			[
				"w",
				"weight"
			],
			[
				"m",
				"maxDiamondFuel"
			],
			[
				"fuel",
				"diamondFuel"
			],
			[
				"B",
				"BirdProperties"
			]
		]
	},
	"buffers":
	[
		{
			"file": "HTML5Application/public_html/oh/leveleditor.html",
			"settings":
			{
				"buffer_size": 2321,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML5Application/public_html/oh/gameLogic.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML5Application/public_html/oh/helpers.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML5Application/public_html/oh/spriteSheetData.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML5Application/public_html/oh/levelEditor/LevelManifest.js",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "HTML5Application/public_html/oh/js/application-control.js",
			"settings":
			{
				"buffer_size": 3449,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var progressBar,\n	stage,\n	queue,\n	canvas,\n	inGameMode = false,\n	isSpriteMode = true,\n	levels,\n	grav = 12,\n	dbText,\n	selectBox = {\n		rect: null,\n		graphic: null\n	},\n	selectPosOnStartDrag = {\n		x: null,\n		y: null\n	},\n	bgCoordinates = {\n		width: 800,\n		height: 1800,\n		offset: -520\n	},\n	fgCoordinates = {\n		height: 150,\n		width: 2000\n	},\n	catzStartPos = {\n		x: 260,\n		y: 1030\n	},\n	mousedown,\n	catzRocketXpos = 0,\n	YOriginPosInGame = 830,\n	levelLength = 13500,\n	levelViewScale = 0.5,\n	beginningZoneLength = 1000,\n	bgCont = new createjs.Container(),\n	objCont = new createjs.Container(),\n	selectedCont = new createjs.Container(),\n	levelView = new createjs.Container(),\n	gameClickScreen,\n	levelEditor = {};\n\nlevelEditor.Init = function() {\n	canvas = $(\"#levelEditCanvas\")[0];\n	stage = new createjs.Stage(canvas);\n	stage.mouseMoveOutside = true;\n	progressBar = new createjs.Shape();\n	progressBar.graphics.beginFill(\"#907a91\").drawRect(0, 0, 100, 20);\n	progressBar.x = canvas.width / 2 - 50;\n	progressBar.y = canvas.height / 2 - 10;\n	stage.addChild(progressBar);\n	queue = new createjs.LoadQueue(true);\n	queue.on(\"progress\", handleProgress);\n	queue.on(\"complete\", handleComplete);\n	queue.loadManifest(LevelManifest);\n}\n\nfunction handleProgress(event) {\n	progressBar.graphics.beginFill(\"#330033\").drawRect(0, 0, 100 * event.progress, 20);\n	stage.update();\n}\n\nfunction handleComplete() {\n	SpriteSheetData.setValues(queue);\n	populateDDL();\n	createLevelView();\n	initSelectBox();\n	setEventListeners();\n	//	createToolView();\n	dbText = helpers.createText(\"hej\", \"16px Fauna One\", \"#ffffcc\", {\n		x: 30,\n		y: 38\n	});\n	stage.addChild(levelView, dbText, gameClickScreen);\n	stage.removeChild(progressBar);\n	createjs.Ticker.on(\"tick\", onTick);\n	createjs.Ticker.setFPS(30);\n	stage.update();\n}\n\nfunction createLevelView() {\n	createBG();\n	createCatz();\n\n\n	levelView.addChild(bgCont, objCont, selectedCont, CatzRocket.catzRocketContainer);\n	levelView.scaleX = levelViewScale;\n	levelView.scaleY = levelViewScale;\n	var canvasHeight = (bgCoordinates.height + bgCoordinates.offset) * levelViewScale;\n	var canvasWidth = levelLength * levelViewScale;\n	document.getElementById(\"levelEditCanvas\").height = canvasHeight;\n	document.getElementById(\"levelEditCanvas\").width = canvasWidth;\n	createGameClickScreen(canvasWidth, canvasHeight);\n}\n\nfunction createGameClickScreen(w, h) {\n	gameClickScreen = helpers.createRectangle(w, h, \"ffffff\", {\n		alpha: 0\n	});\n}\n\nfunction createBG() {\n	for (i = 0, len = 2 + levelLength / bgCoordinates.width; i < len; i++) {\n		var bgClone = new createjs.Bitmap(queue.getResult(\"bg\"));\n		bgClone.x = i * bgCoordinates.width;\n		bgClone.y = bgCoordinates.offset;\n		if (i % 2 === 0) {\n			bgClone.scaleX = -1;\n			bgClone.x -= bgCoordinates.width;\n		}\n		bgCont.addChild(bgClone);\n	}\n	for (i = 0, len = levelLength / fgCoordinates.width; i < len; i++) {\n		var fgClone = new createjs.Bitmap(queue.getResult(\"fgGround\"));\n		fgClone.x = fgCoordinates.width * i;\n		fgClone.y = 300 + YOriginPosInGame;\n		var topClone = new createjs.Bitmap(queue.getResult(\"fgGroundTop\"));\n		topClone.x = fgCoordinates.width * i;\n		topClone.y = 0;\n		bgCont.addChild(fgClone, topClone);\n	}\n	startLine=helpers.createRectangle(10,bgCoordinates.height-bgCoordinates.offset, \"red\", {x:beginningZoneLength})\n	bgCont.addChild(startLine);\n}\n\nfunction createCatz() {\n	CatzRocket.Init();\n	CatzRocket.catz = helpers.createSprite(SpriteSheetData.rocket, \"no shake\", {\n		y: 5\n	});\n	CatzRocket.catzRocketContainer.regY = 100;\n	CatzRocket.catzRocketContainer.regX = 150;\n	CatzRocket.catz.currentFrame = 0;\n	CatzRocket.rocketFlame = helpers.createSprite(SpriteSheetData.flame, \"cycle\", {\n		x: 190,\n		y: 200,\n		regX: 40,\n		regY: -37,\n		alpha: 0\n	});\n	CatzRocket.SnakeLine = new createjs.Shape();\n	CatzRocket.rocket = helpers.createBitmap(queue.getResult(\"rocket\"), {\n		scaleX: 0.25,\n		scaleY: 0.25,\n		regX: -430,\n		regY: -320\n	});\n	CatzRocket.rocketSound = createjs.Sound.play(\"rocketSound\");\n	CatzRocket.rocketSound.volume = 0.1;\n	CatzRocket.rocketSound.stop();\n	for (var i = 0, snakeAmt = 11; i < snakeAmt; i++) {\n		var shape = new createjs.Shape();\n		var x = 260 - i * 5;\n		var r = 9;\n		shape.graphics.f(\"fffff\").dc(x, 200, r);\n		shape.regY = 5;\n		shape.regX = 5;\n		CatzRocket.rocketSnake.addChild(shape);\n	}\n	CatzRocket.glass = helpers.createSprite(SpriteSheetData.hudGlass, \"still\", {\n		regX: 150,\n		regY: 200,\n		scaleX: 0.85,\n		scaleY: 0.85,\n		x: 670,\n		y: 158\n	});\n	CatzRocket.setCrashBorders(0, YOriginPosInGame + 450);\n	CatzRocket.catzRocketContainer.addChild(CatzRocket.rocket, CatzRocket.catz);\n	CatzRocket.catzRocketContainer.on(\"pressmove\", pressMoveCatz);\n}\n\nfunction populateDDL() {\n	var ddl = document.getElementById(\"importSelect\");\n	levels = Object.keys(TrackParts.easy);\n	for (i = 0, len = levels.length; i < len; i++) {\n		var option = document.createElement(\"option\");\n		option.text = levels[i];\n		ddl.add(option);\n	}\n}\n\n\nfunction setEventListeners() {\n	bgCont.on(\"mousedown\", createSelectBox);\n	bgCont.on(\"pressmove\", dragBox);\n	bgCont.on(\"pressup\", selectWithBox);\n	selectedCont.on(\"mousedown\", startPressMove);\n	selectedCont.on(\"pressmove\", pressMove);\n	gameClickScreen.on(\"mousedown\", gameMouseDown);\n	gameClickScreen.on(\"click\", gameMouseUp);\n}\n\nfunction startPressMove(evt) {\n	selectPosOnStartDrag.x = evt.stageX / levelViewScale - selectedCont.x;\n	selectPosOnStartDrag.y = evt.stageY / levelViewScale - selectedCont.y;\n}\n\nfunction pressMove(evt) {\n	evt.currentTarget.x = evt.stageX / levelViewScale - selectPosOnStartDrag.x;\n	evt.currentTarget.y = evt.stageY / levelViewScale - selectPosOnStartDrag.y;\n	stage.update();\n}\n\nfunction pressMoveCatz(evt) {\n	evt.currentTarget.x = evt.stageX / levelViewScale;\n	evt.currentTarget.y = evt.stageY / levelViewScale;\n	stage.update();\n}\n\nfunction deleteAllSelected(evt) {\n	selectedCont.removeAllChildren();\n}\n\nfunction deleteAll() {\n	selectedCont.removeAllChildren();\n	objCont.removeAllChildren();\n\n}\n\nfunction catzToStartPosition() {\n	exitGameMode();\n	window.scrollTo(0, 0);\n	CatzRocket.catzRocketContainer.y = catzStartPos.y;\n	CatzRocket.catzRocketContainer.x = catzStartPos.x;\n}\n\nfunction changeBirdType(evt) {\n	types = [\"seagull\",\n		\"duck\",\n		\"crow\",\n		\"bat\",\n		\"falcon\",\n		\"glasses\"\n	];\n	for (i = types.length - 1; i >= 0; i--) {\n		if (evt.currentTarget.currentAnimation === types[i]) {\n			evt.currentTarget.gotoAndStop(types[i + 1]);\n			return;\n		}\n	}\n}\n\nfunction initSelectBox() {\n	selectBox.rect = new createjs.Rectangle(0, 0, 0, 0);\n	selectBox.graphic = new createjs.Shape();\n\n}\n\nfunction createSelectBox(evt) {\n	moveChildrenFromSelectedToObjCont();\n	selectBox.rect.setValues(evt.stageX / levelViewScale, evt.stageY / levelViewScale, 1, 1);\n	selectBox.graphic.graphics.clear();\n	selectBox.graphic.graphics.setStrokeStyle(1);\n	levelView.addChild(selectBox.graphic);\n	drawSelectBox();\n}\n\n\nfunction dragBox(evt) {\n	selectBox.graphic.graphics.clear();\n	selectBox.rect.width = evt.stageX / levelViewScale - selectBox.rect.x;\n	selectBox.rect.height = evt.stageY / levelViewScale - selectBox.rect.y;\n	drawSelectBox();\n}\n\nfunction drawSelectBox() {\n	selectBox.graphic.graphics.beginStroke(\"#ffffff\").drawRect(\n		selectBox.rect.x, selectBox.rect.y, selectBox.rect.width, selectBox.rect.height);\n	stage.update();\n}\n\nfunction selectWithBox(evt) {\n	//remove selected items not in the box\n	moveChildrenFromSelectedToObjCont();\n	//add items in the box\n	for (var i = objCont.numChildren - 1; i >= 0; i--) {\n		var kid = objCont.getChildAt(i);\n		if (helpers.isInRectangle(kid.x, kid.y, selectBox.rect)) {\n			selectedCont.addChild(kid);\n		}\n	};\n	if (selectedCont.numChildren === 0) {\n\n		selectBox.graphic.graphics.clear();\n	} else {\n		selectBox.graphic.graphics.clear();\n		selectedCont.alpha = 0.5;\n	}\n}\n\nfunction selectItem(evt) {\n	if (evt.currentTarget.parent === objCont) {\n		moveChildrenFromSelectedToObjCont();\n		selectedCont.addChild(evt.currentTarget);\n		startPressMove(evt);\n	}\n}\n\n\nfunction moveChildrenFromSelectedToObjCont() {\n	for (var i = selectedCont.numChildren - 1; i >= 0; i--) {\n		var kid = selectedCont.getChildAt(i);\n		kid.x += selectedCont.x;\n		kid.y += selectedCont.y;\n		kid.alpha = 1;\n		objCont.addChild(kid);\n	};\n	selectedCont.x = 0;\n	selectedCont.y = 0;\n}\n\nfunction createSmallDiamond(event) {\n	var x = currentCenterX()+Math.random()*100;\n	var y = 500+Math.random()*100;\n	createDisplayObject(x, y, \"diamond\", \"cycle\");;\n}\n\nfunction createMediumDiamond(event) {\n	var x = currentCenterX()+Math.random()*100;\n	var y = 500+Math.random()*100;\n	createDisplayObject(x, y, \"mediumDiamond\", \"mediumCycle\");\n}\n\nfunction createGrandDiamond(event) {\n	var x = currentCenterX()+Math.random()*100;\n	var y = 500+Math.random()*100;\n	createDisplayObject(x, y, \"greatDiamond\", \"greatCycle\");\n}\n\nfunction createSeagull(event) {\n	var x = currentCenterX()+Math.random()*100;\n	var y = 250+Math.random()*100;\n	createDisplayObject(x, y, \"enemybirds\", \"seagull\");\n}\n\nfunction createDisplayObject(x, y, sprite, currentAnimation) {\n	if (isSpriteMode) {\n		var obj = createDisplaySprite(x, y, sprite, currentAnimation);\n	} else {\n		obj = createDisplayShape(x, y, sprite, currentAnimation);\n	}\n	objCont.addChild(obj);\n	obj.on(\"mousedown\", selectItem);\n}\n\nfunction createDisplaySprite(x, y, sprite, currentAnimation) {\n	var obj = helpers.createSprite(SpriteSheetData[sprite], currentAnimation, {\n		x: x,\n		y: y\n	});\n\n	obj.stop();\n	if (sprite === \"enemybirds\") {\n		obj.on(\"dblclick\", changeBirdType);\n		obj.scaleX = 0.5;\n		obj.scaleY = 0.5;\n	};\n	return obj;\n}\n\nfunction createDisplayShape() {}\n\nfunction onTick(evt) {\n\n	dbText.text = catzRocketXpos;\n	if (inGameMode === true) {\n		gameUpdate(evt);\n	}\n	stage.update();\n}\n\nfunction gameUpdate(evt) {\n	CatzRocket.diamondFuel = 10;\n	CatzRocket.update(grav, 0, evt);\n	var mult = 1;\n	if (CatzRocket.hasFrenzy())\n		mult = 2;\n	catzRocketXpos += evt.delta * (0.3 + 0.3 * Math.cos((CatzRocket.catzRocketContainer.rotation) / 360 * 2 * Math.PI)) * mult;\n	CatzRocket.catzRocketContainer.x += catzRocketXpos;\n	var x = catzRocketXpos * levelViewScale - 200;\n	window.scrollTo(x, 0);\n	if (CatzRocket.isCrashed) {\n		exitGameMode();\n	}\n}\n\nfunction enterGameMode() {\n	catzRocketXpos = CatzRocket.catzRocketContainer.x - 200;\n	CatzRocket.heightOffset =\n		CatzRocket.catzRocketContainer.y - 400;\n	CatzRocket.start(CatzRocket.catzVelocity);\n	gameClickScreen.alpha = 0.05;\n	inGameMode = true;\n}\n\n\nfunction exitGameMode() {\n	CatzRocket.reset();\n	CatzRocket.catzRocketContainer.y = catzStartPos.y;\n	CatzRocket.catzRocketContainer.x = currentCenterX();\n	gameClickScreen.alpha = 0;\n	inGameMode = false;\n}\n\nfunction gameMouseDown() {\n	mousedown = true;\n	CatzRocket.catzUp();\n}\n\nfunction gameMouseUp() {\n	console.log(\"up\");\n	mousedown = false;\n	CatzRocket.catzEndLoop();\n}\n\nfunction getObjType(kid) {\n	var type;\n	if (kid.currentAnimation === \"cycle\") {\n		type = \"diamond\";\n	} else if (kid.currentAnimation === \"mediumCycle\") {\n		type = \"mediumDiamond\";\n	} else if (kid.currentAnimation === \"greatCycle\") {\n		type = \"greatDiamond\";\n	} else {\n		type = \"attackBird\";\n	}\n	return type;\n}\n\n\nfunction saveLevel() {\n	document.getElementById(\"levelText\").innerHTML = \"\";\n	var stringBuilder = [\"levelName:[\\n\"];\n	moveChildrenFromSelectedToObjCont();\n	sortDisplayObjectArray();\n	for (j = 0, len = objCont.numChildren; j < len; j++) {\n		kid = objCont.getChildAt(j);\n		stringBuilder.push(displayObjectToString(kid));\n	}\n	levelString = stringBuilder.join(\"\");\n	levelString = levelString.substring(0, levelString.length - 2); //slice off the last comma\n	levelString += \"\\n]\";\n	//window.alert(levelString);\n	document.getElementById(\"levelText\").innerHTML = levelString;\n}\n\nfunction sortDisplayObjectArray() {\n	objCont.children.sort(function(a, b) {\n		return (a.x >= b.x) ? 1 : -1;\n	});\n}\n\nfunction displayObjectToString(obj) {\n	var x = kid.x -beginningZoneLength;\n	return '{\"x\":' +\n		x+\n		', \"y\":' +\n		YEditorToGame(kid.y) +\n		',type:' +\n		getObjType(kid) +\n		',\"animation\":' +\n		kid.currentAnimation +\n		',\"graphicType\":\"sprite\"},\\n';\n}\n\nfunction loadLevel(offsetX) {\n	var ddl = document.getElementById(\"importSelect\");\n	var levelName = levels[ddl.selectedIndex];\n	if (TrackParts.easy.hasOwnProperty(levelName)) {\n		for (var i = TrackParts.easy[levelName].length - 1; i >= 0; i--) {\n			var kid = TrackParts.easy[levelName][i];\n			createDisplayObject(kid.x + offsetX+beginningZoneLength, YGameToEditor(kid.y), kid.type, kid.currentAnimation);\n		};\n	} else {\n		alert(\"Doesn't seem to exist\");\n	}\n}\n\nfunction eraseAndImport(evt) {\n	if (confirm(\"Do you want to load a new level? Unsaved progress will be lost?\")) {\n		objCont.removeAllChildren();\n		loadLevel(0);\n	}\n}\n\nfunction addToImport(evt) {\n	loadLevel(currentCenterX());\n}\n\nfunction YEditorToGame(y) {\n	return y - YOriginPosInGame;\n}\n\nfunction YGameToEditor(y) {\n	return y + YOriginPosInGame;\n}\n\nfunction currentCenterX() {\n	return window.scrollX / levelViewScale + 200;\n}",
			"file": "HTML5Application/public_html/oh/js/level-editor.js",
			"file_size": 13323,
			"file_write_time": 130760669198698573,
			"settings":
			{
				"buffer_size": 12822,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var GameLogic = (function(){\n    var            \n	gameLogic={},		        \n    cloudSpeed,    	            \n    diSpeed,        \n    fgSpeed,                       \n    jump,                       \n    mousedown,        \n    parallaxSpeed,                                              \n    track,                \n	cloudIsIn = new Array(),	\n	currentDisplacement = 0,\n	currentLevel = 0,\n	currentTrack = 0,	\n	directorTimer=0,		\n	grav = 12,\n	lastResolveNorm = [1,0],	\n	onTrack=false,                	\n	paused = false,	\n	trackTimer = 0,	\n	wind=0,	\n	zoomOut = false,\n	zooming = false,\n	fuelBlinkTimer = 0,\n    containerDict = {\n        \"diamond\" : cont.diamond,\n        \"mediumDiamond\" : cont.diamond,\n        \"greatDiamond\" : cont.diamond,\n        \"seagull\" : cont.sg,\n        \"goose\" : cont.goose,\n        \"hawk\" : cont.hawk,\n        \"thunderCloud\" : cont.thunder\n    },\n    \n    directorStateEnum = {\n        Normal : 0,\n        Birds : 1,\n        Wind : 2,\n        Thunder : 3\n    },\n	directorState=directorStateEnum.Normal; \n\n    gameLogic.timeAdjust = function(event){\n        if(event.delta>0.05){\n            event.delta=0.05;\n        }\n    }\n    \n    gameLogic.houseTick = function(event){	\n //       gameLogic.timeAdjust(event);\n        stage.update();\n        if(House.characterSpeach.alpha > 0)        \n            House.characterSpeach.alpha -= 0.015;        \n        \n        if(House.catzSpeach.alpha > 0)        \n            House.catzSpeach.alpha -= 0.015;        \n                \n        if(rocketSong.getPosition()<100)\n			rocketSong.play();            		        \n        \n        debugText.text =                                 \n                + \"\\nHoboDialogNo: \" + House.hoboDialogNumber                        \n                + \"\\nbg.y: \" + bg.y;\n    }                                \n\n    gameLogic.update = function(event){     \n//        gameLogic.timeAdjust(event);\n        if(!paused){                        \n            var mult=1;\n            if (CatzRocket.hasFrenzy())            \n                mult=2;            \n            diSpeed = (0.3+0.3* Math.cos((CatzRocket.catzRocketContainer.rotation)/360*2*Math.PI))*mult;            \n            cloudSpeed = (12.5+12.5* Math.cos((CatzRocket.catzRocketContainer.rotation)/360*2*Math.PI))*mult;\n            fgSpeed = (7+7* Math.cos((CatzRocket.catzRocketContainer.rotation)/360*2*Math.PI))*mult;                  \n            parallaxSpeed = (0.3+0.3* Math.cos((CatzRocket.catzRocketContainer.rotation)/360*2*Math.PI))*mult;                                            \n                        \n			$('.odometer').html(gameStats.score);            \n            \n            if(!gameStats.hasBeenFirst.frenzy && CatzRocket.hasFrenzy()){                                                           \n                gameStats.hasBeenFirst.frenzy = true;                                                                   \n            }                                                \n            if(debugOptions.infiniteFuel && CatzRocket.diamondFuel<1)            \n                CatzRocket.diamondFuel=1;            \n            CatzRocket.update(grav,wind,event);\n            updateVertices();\n            updateDirector(event);\n            updateOnlookers(event);\n            updateFg(event);\n            updateFgTop(event);\n            updateParallax(event);\n            updateDiamonds(event);\n            //updateScatterDiamonds(event);\n            updatePointer(event);\n            updateClouds(event);\n            updateWorldContainer();\n            updateThunderClouds();\n            updateAttackBird(event);\n            drawCollisionModels();\n            if(CatzRocket.isCrashed)            \n                crash();            \n            debugText.text = \n                \"rotation \"+CatzRocket.catzRocketContainer.rotation\n                +\"\\n\\nvelocity \"+CatzRocket.catzVelocity\n                +\"\\nfuel  \"+CatzRocket.diamondFuel\n                + \"\\nfrenzyReady: \" + CatzRocket.frenzyReady\n                + \"\\nHoboDialogNo: \" + House.hoboDialogNumber\n                +\"\\n\\ncurrentDisplacement: \"+currentDisplacement\n                +\"\\n\\currentLevel\"+currentLevel\n                +\"\\n\\mousedown: \"+mousedown\n                +\"\\nstate: \"+CatzRocket.catzState;\n        \n        \n            stage.update(event); \n        }\n    }\n    \n    function updateWorldContainer(event){\n        var zoomDuration = 1000;\n        var zoomOutLimit=0.37;\n\n        if((!createjs.Tween.hasActiveTweens(gameView) && !createjs.Tween.hasActiveTweens(bg) && !createjs.Tween.hasActiveTweens(cont.star)) && !CatzRocket.isCrashed){\n            if(!zoomOut && CatzRocket.catzRocketContainer.y < 0 && CatzRocket.catzState === CatzRocket.catzStateEnum.Normal){               \n                zooming = true;\n                createjs.Tween.get(gameView)\n                    .to({scaleX:zoomOutLimit, scaleY:zoomOutLimit}, zoomDuration, createjs.Ease.linear)\n                    .call(function () {zoomOut=true; zooming = false;});                                \n                    \n                createjs.Tween.get(bg)\n                    .to({scaleX:1,scaleY:zoomOutLimit}, zoomDuration, createjs.Ease.linear);                                                \n                    \n                createjs.Tween.get(cont.star)\n                    .to({scaleX:zoomOutLimit,scaleY:zoomOutLimit}, zoomDuration, createjs.Ease.linear);                 \n            }               \n            else if(zoomOut && CatzRocket.catzRocketContainer.y > 300 && CatzRocket.catzState === CatzRocket.catzStateEnum.Normal){\n                zooming = true;             \n                createjs.Tween.get(gameView)\n                    .to({scaleX:1,scaleY:1}, zoomDuration, createjs.Ease.linear)\n                    .call(function () {zoomOut=false; zooming = false;});                               \n                \n                createjs.Tween.get(bg)\n                    .to({scaleX:1,scaleY:1}, zoomDuration, createjs.Ease.linear);                                               \n                    \n                createjs.Tween.get(cont.star)\n                    .to({scaleX:1,scaleY:1}, zoomDuration, createjs.Ease.linear);                                                               \n            }\n        }               \n                \n        var catzCameraPos = Math.min(CatzRocket.catzRocketContainer.y,200);\n        var zoomPercent=(gameView.scaleY-zoomOutLimit)/(1-zoomOutLimit);\n        bg.y = (-1100-catzCameraPos/3)*zoomPercent-200*(1-zoomPercent); \n        cont.star.y=(100-catzCameraPos/3)*zoomPercent-270*(1-zoomPercent);\n        gameView.y=(200-catzCameraPos)*zoomPercent+300*(1-zoomPercent);\n    }\n\n    function updateParallax(event){        \n        for (var i = 0, arrayLength = cont.parallax.children.length; i < arrayLength; i++) {\n            var kid = cont.parallax.children[i];        \n            if (kid.x <= -2460)            \n				kid.x = 2460;            \n            kid.x = kid.x - parallaxSpeed*event.delta/10; \n        }                \n    }\n    \n    function updateFg(event){\n        if(Math.random()>0.98){		\n            var tree = helpers.createBitmap(queue.getResult(\"fgTree1\"), \n				{x:2200, y:290});                						\n            cont.fg.addChild(tree);        \n        }        				\n        for (var i = 0, arrayLength = cont.fg.children.length; i < arrayLength; i++) {\n            var kid = cont.fg.children[i];        \n            if (kid.x <= -3200)\n				kid.x += 6000;            \n            kid.x = kid.x - fgSpeed*event.delta/10; \n            if((CatzRocket.catzRocketContainer.x-catzBounds.width)<(kid.x) && CatzRocket.catzRocketContainer.x > \n                    kid.x && (CatzRocket.catzRocketContainer.y-catzBounds.height) < kid.y\n                    && CatzRocket.catzRocketContainer.y > kid.y){\n                leaves.alpha = 1;\n                leaves.rotation = 0;\n                leaves.x = kid.x+50;\n                leaves.y = kid.y;\n                leaves.gotoAndPlay(\"cycle\");\n                leaves.addEventListener(\"animationend\",function(){hideLeaves();});\n            }\n        }                \n        if (arrayLength>3){\n            if(cont.fg.children[3].x < -100)            \n                cont.fg.removeChildAt(3);            \n        }\n        \n        if(leaves.alpha===1)        \n           leaves.x-= fgSpeed*event.delta/20;          \n    }\n    \n    function updateFgTop(event){           \n        for (var i = 0, arrayLength = cont.fgTop.children.length; i < arrayLength; i++) {\n            var kid = cont.fgTop.children[i];        \n            if (kid.x <= -3200)            \n				kid.x += 6000;            \n            kid.x -= fgSpeed*event.delta/10; \n        }   		\n    }\n    \n    function hideLeaves(){\n        leaves.alpha=0;\n    }\n    \n	function spawnCloud(){\n\n \n		var cloudtype = \"cloud\"+Math.floor(Math.random()*5+1).toString();            \n		var scale = Math.random()*0.3+0.3;			\n        var cloud = new Cloud(queue.getResult(cloudtype));\n        cloud.scaleX = scale;\n        cloud.scaleY = scale;\n        cloud.x = 2200;\n        cloud.y = Math.floor(Math.random()*1000-1000);\n        cloud.catzIsInside=false;\n		cont.cloud.addChild(cloud); \n	}\n	\n    function updateClouds(event){\n        if(Math.random()>0.97){            \n            spawnCloud()\n        }        \n        for (var i = 0, arrayLength = cont.cloud.children.length; i < arrayLength; i++) {\n            var kid = cont.cloud.children[i];  \n			kid.x -= cloudSpeed;   \n            if (kid.x <= -500){\n              cont.cloud.removeChildAt(i);\n              arrayLength -= 1;\n              i -= 1;\n            }\n            var rect = kid.getBounds();\n            if(CatzRocket.catzRocketContainer.x<(kid.x+rect.width*kid.scaleX) && CatzRocket.catzRocketContainer.x > \n                    kid.x && CatzRocket.catzRocketContainer.y < (kid.y+rect.height*kid.scaleY)\n                    && CatzRocket.catzRocketContainer.y > kid.y && kid.catzIsInside===false){\n                kid.catzIsInside = true;\n                smoke.alpha = 1;\n                smoke.rotation = CatzRocket.catzRocketContainer.rotation+270;\n                smoke.x = CatzRocket.catzRocketContainer.x;\n                smoke.y = CatzRocket.catzRocketContainer.y;\n                smoke.gotoAndPlay(\"jump\");\n                smoke.addEventListener(\"animationend\",function(){hideSmoke();});\n            }\n            else if(kid.catzIsInside===true\n                    && \n                    ((CatzRocket.catzRocketContainer.x-catzBounds.width/2)> (kid.x+rect.width*kid.scaleX)\n                    || CatzRocket.catzRocketContainer.y-catzBounds.height/2 > (kid.y+rect.height*kid.scaleY)\n                    || (CatzRocket.catzRocketContainer.y+catzBounds.height < kid.y))){\n                kid.catzIsInside = false;\n                exitSmoke.alpha = 1;\n                exitSmoke.rotation = CatzRocket.catzRocketContainer.rotation;\n                exitSmoke.x = CatzRocket.catzRocketContainer.x;\n                exitSmoke.y = CatzRocket.catzRocketContainer.y;\n                exitSmoke.gotoAndPlay(\"right\");\n                exitSmoke.addEventListener(\"animationend\",function(){hideExitSmoke();});\n            }\n        }  \n        if(smoke.alpha===1)        \n            smoke.x-=cloudSpeed;       \n        if(exitSmoke.alpha===1)        \n            exitSmoke.x-=cloudSpeed;        \n    }\n    \n    function spawnThunderCloud(xPos,yPos, type){\n        createjs.Sound.play(\"thunder\");\n        var cloudtype = Math.floor(Math.random()*5+1);\n        cloudtype = \"cloud\"+cloudtype.toString();\n        var scale = Math.random()*0.3+0.3;\n        var cloud = new ThunderCloud(queue.getResult(cloudtype));\n        cloud.scaleX = scale;\n        cloud.scaleY = scale;\n        cloud.x = xPos;\n        cloud.y = yPos;\n        cloud.filters = [new createjs.ColorFilter(0.3,0.3,0.3,1, 0,0,55,0)];\n        var rect = cloud.getBounds();\n        cloud.cache(rect.x,rect.y,rect.width,rect.height);\n        cont.thunder.addChild(cloud); \n    }\n    \n    function updateThunderClouds(event){        \n        for (var i = 0, arrayLength = cont.thunder.children.length; i < arrayLength; i++) {\n            var kid = cont.thunder.children[i];  \n             kid.x -= cloudSpeed;   \n            if (kid.x <= -500){\n              cont.thunder.removeChildAt(i);\n              arrayLength -= 1;\n              i -= 1;\n            }\n            var rect = kid.getBounds();\n            if(!kid.hasFired && !CatzRocket.isHit && CatzRocket.catzRocketContainer.x<(kid.x+rect.width*kid.scaleX) && CatzRocket.catzRocketContainer.x > \n                    kid.x && CatzRocket.catzRocketContainer.y < (kid.y+rect.height*kid.scaleY+200)\n                    && CatzRocket.catzRocketContainer.y > kid.y+50){\n                kid.hasFired =true;\n                var birdHit=false;\n                var spotX=0;\n                var spotY=0;\n                for (var i = 0, max = cont.attackBird.children.length; i < max; i++) {\n                    var bird = cont.attackBird.children[i];\n                    if(bird.x<(kid.x+rect.width*kid.scaleX+50) \n                        && bird.x > kid.x-100 \n                        && bird.y < CatzRocket.catzRocketContainer.y\n                        && bird.y > kid.y+50){\n                        birdHit=true;\n                        bird.setGrilled();\n                        break;\n                        spotX = bird.x;\n                        spotY = bird.y;\n                    }\n                }\n                if(!birdHit){\n                    if(!debugOptions.godMode){\n                        if(CatzRocket.getHit(true)) {                     \n                            catzFellOfRocket();\n                        } \n                    }\n                    spotX = CatzRocket.catzRocketContainer.x;\n                    spotY = CatzRocket.catzRocketContainer.y;\n                }\n                var lightning= new createjs.Shape();\n                lightning.graphics.setStrokeStyle(3,1);\n                lightning.graphics.beginStroke(lightningColor);\n                lightning.graphics.moveTo(kid.x,kid.y);\n                lightning.graphics.lineTo(kid.x+(spotX-kid.x)/3+50,kid.y+(spotY-kid.y)/3);\n                lightning.graphics.lineTo(kid.x+(spotX-kid.x)*2/3-50,kid.y+(spotY-kid.y)*2/3);\n                lightning.graphics.lineTo(spotX,spotY);\n                lightning.graphics.endStroke();\n                cont.lightning.addChild(lightning);\n                createjs.Tween.get(lightning).to({alpha:0},300);\n                createjs.Sound.play(\"lightningBolt\");\n                createjs.Tween.get(gameView)\n                .to({x:-50, y:20},50)\n                .to({x:50, y:-40},50)\n                .to({x:-50, y:50},50)\n                .to({x:20, y:-20},50)\n                .to({x:-10, y:10},50)\n                .to({x:10, y:-10},50)\n                .to({x:0, y:0},50);\n            }\n        }\n    }\n    \n    function setParallax(int){\n        createjs.Tween.get(gameView)\n            .to({alpha:0},800)\n            .call(function(){changeParallax(int)})\n            .to({alpha:1},800)\n    }\n\n    function changeParallax(int){\n        cont.parallax.removeAllChildren();\n        var name=\"bgParallax \"+int;     \n        var bgParallax = helpers.createBitmap(queue.getResult(name), {y:-200});                                \n        var bgParallax2 = helpers.createBitmap(queue.getResult(name), {x:2460, y:-200});                \n        \n        if(currentLevel===1){\n            bgParallax.y=100;\n            bgParallax2.y=100;\n        }\n        cont.parallax.addChild(bgParallax,bgParallax2);\n    }\n    \n    function generateTrack(){\n        var result = [];\n        var displacementX = 2200;        \n        if(gameStats.Difficulty>=0){\n            for(j=0, max1=Tracks[currentLevel][currentTrack].length;j<max1;j++){				\n                var element = $.extend(true, [], TrackParts[Tracks[currentLevel][currentTrack][j].difficulty][Tracks[currentLevel][currentTrack][j].name]);\n                 for (i=0, max2=element.length;i<max2;i++){\n                    element[i].x+=displacementX;\n                    element[i].y;\n                    if(i===element.length-1 && element[i].graphicType!==\"attackBird\")\n                        displacementX = element[i].x;                                            \n                }\n                result = result.concat(element);                \n            }            \n            currentTrack+=1;\n            return result;\n        }\n    }\n    \n    \n    function updateDirector(event){\n        directorTimer+=event.delta;\n        if (onTrack){\n            if(cont.diamond.getNumChildren()===0){\n                onTrack =false;                \n                if(Tracks[currentLevel].length===currentTrack){\n                    currentTrack=0;\n                    currentLevel++;\n                    if(Tracks.length===currentLevel)                    \n                        currentLevel=0;                    \n                    setParallax(currentLevel);\n                }\n            }\n        }\n        else{\n            trackTimer+=event.delta;\n            if (trackTimer>1000){\n                trackTimer=0;\n                onTrack=true;\n                gameStats.Difficulty++;\n                track = generateTrack();				\n                for (i=0, max=track.length; i<max;i++){\n                    if (track[i].graphicType===\"thunderCloud\"){\n                        spawnThunderCloud(track[i].x,track[i].y-200);\n                    }\n                    else if(track[i].graphicType===\"sprite\"){                                                						\n                        var sprite  = helpers.createSprite(dataDict[track[i].type],track[i].animation, \n							{x:track[i].x, y:track[i].y});											\n                        containerDict[track[i].type].addChild(sprite);                                                \n                    }\n                    else if(track[i].graphicType===\"attackBird\"){\n                        spawnAttackBird(track[i].animation,track[i].x,track[i].y+CatzRocket.catzRocketContainer.y);\n                    }\n                }				\n            }\n        }\n        switch(directorState){\n            case directorStateEnum.Normal:\n               break;\n            case directorStateEnum.Birds:\n                var rand =Math.random();\n                var y;\n                if(rand>0.99){\n                    y =Math.random()*700-500;\n                    spawnGoose(1000,y);\n                    for (var i=1; i<6 ;i++){\n                        spawnGoose(1000+50*i,y+i*50);\n                        spawnGoose(1000+50*i,y-i*50);\n                    }\n                }\n                else if(rand>0.98){\n                    y =Math.random()*700-500;\n                    for (var i=0; i<10 ;i++){\n                        spawnGoose(1000+100*i,y);\n                    }\n                }\n                else if(rand>0.97){\n                   spawnSeagull(1000,-500 +Math.random()*700);\n                   spawnSeagull(1000,-500 +Math.random()*700);\n                }\n                break;\n            case directorStateEnum.Thunder:\n                var rand =Math.random();\n                if(rand>0.98){\n                    spawnThunderCloud(1000,Math.floor(Math.random()*1000-1000));                   \n                }\n               break;\n            case directorStateEnum.Wind:\n                var rand =Math.random();\n                if(rand>0.98){\n                    upWind();\n                }\n                else if (rand>0.96){\n                    downWind();\n                }\n                break;\n        }\n        if(directorTimer>7000){\n            noWind();            \n            directorState = 0;\n            directorTimer=0;\n        }\n    }\n    \n    function updateOnlookers(event){\n        var arrayLength = cont.onlooker.children.length;        \n        if(arrayLength<3){   \n            var xOffset = 0;\n            function addOnlooker(onlooker){            \n                var oCont = new createjs.Container();\n                oCont.x=800 + xOffset;\n                xOffset+= 300;\n                oCont.y= 180;\n                onlooker.x=30;\n                onlooker.y=0;\n                var variant = \"MobHill\"+Math.floor(Math.random()*2+1);				\n                var hill = helpers.createBitmap(queue.getResult(variant), {y:95});                			               \n                oCont.addChild(onlooker, hill);\n                cont.onlooker.addChild(oCont);\n            }\n            \n			var onlooker;\n            if(Math.random()>1 - gameStats.kittens.approvalRating){\n                onlooker = helpers.createSprite(\"orphans\", {});								\n                addOnlooker(onlooker);\n            }\n            if(Math.random()< -gameStats.catParty.approvalRating){\n                onlooker = helpers.createSprite(\"cat party\", {});												\n                addOnlooker(onlooker);\n            }\n            if(Math.random()< -gameStats.villagers.approvalRating){\n                onlooker = helpers.createSprite(\"angry mob\", {});												\n                addOnlooker(onlooker);\n            }\n            if(Math.random()< gameStats.villagers.approvalRating){\n				onlooker = helpers.createSprite(\"loving mob\", {});												                \n                addOnlooker(onlooker);\n            }                        \n        }        \n        \n        for (var i = 0; i < arrayLength; i++) {\n            var oC = cont.onlooker.children[i];            \n            oC.x -= diSpeed/2*event.delta;    \n            if (oC.x <= -400){\n              cont.onlooker.removeChildAt(i);\n              arrayLength = arrayLength - 1;\n              i = i - 1;\n            }         \n        }\n    }\n    \n    function updatePointer(){\n		$('.progress-bar').css('width', CatzRocket.diamondFuel*5+'%');				\n		if(CatzRocket.diamondFuel < 2){\n			if(fuelBlinkTimer > 10){\n				$('.progress-bar').toggleClass(\"background-red\");\n				fuelBlinkTimer = 0;\n			}\n			fuelBlinkTimer++;\n		}\n		if(CatzRocket.diamondFuel >= 2)\n			$('.progress-bar').removeClass(\"background-red\");\n        //hudPointer.rotation = Math.min(-30 + CatzRocket.diamondFuel*135/10,105);                \n    }\n\n    function updateDiamonds(event){        \n        for (var i = 0, arrayLength = cont.diamond.children.length; i < arrayLength; i++) {\n            var kid = cont.diamond.children[i];			\n            kid.x -= diSpeed*event.delta;    											\n            if (kid.x <= -100){\n              cont.diamond.removeChildAt(i);\n              arrayLength -= 1;\n              i -= 1;\n            }   \n			else {				\n				if(overlapCheckCircle(kid.x,kid.y,40)){										\n					if(kid.currentAnimation===\"cycle\"){	\n						gameStats.score += 1;						\n						CatzRocket.pickupDiamond(diamondEnum.shard);						\n					}\n					else if(kid.currentAnimation===\"mediumCycle\"){					\n						gameStats.score += 10;\n						CatzRocket.pickupDiamond(diamondEnum.medium);						\n											\n					}\n					else if(kid.currentAnimation===\"greatCycle\"){						\n						gameStats.score += 1000;						\n						CatzRocket.pickupDiamond(diamondEnum.great);						\n					}								\n					cont.diamond.removeChildAt(i);\n					arrayLength -= 1;\n					i -= 1;\n                    var instance = createjs.Sound.play(\"diamondSound\");\n                     instance.volume=0.15;            					\n				}\n			}\n        }   \n    }\n    \n    /*function updateScatterDiamonds(event){\n        if(currentTrack<2)\n            var thres = 0.95;        \n        else if(currentTrack<4)\n            thres = 0.90;        \n        else if(currentTrack<6)\n            thres = 0.8;       \n        else\n            thres = 0.7;\n        \n        if(Math.random()>thres){\n            var diamond = helpers.createSprite(SpriteSheetData.diamond, \"cycle\", \n				{x:800, y:Math.pow(35*Math.random(),2)-1000, scaleX:0.75, scaleY:0.75});			                                    \n            scatterDiamondsCont.addChild(diamond);\n        }        \n        for (var i = 0, arrayLength = scatterDiamondsCont.children.length; i < arrayLength; i++) {\n            var kid = scatterDiamondsCont.children[i];\n            kid.x -= diSpeed*event.delta;    \n            if (kid.x <= -100){\n              scatterDiamondsCont.removeChildAt(i);\n              arrayLength -= 1;\n              i -= 1;\n            }                               \n            if(overlapCheckCircle(kid.x,kid.y,40)){\n                gameStats.score += 1;\n                CatzRocket.frenzyCount+=7.5;\n                arrayLength = arrayLength - 1;\n                diamondSound.play();\n                CatzRocket.diamondFuel +=1;\n                scatterDiamondsCont.removeChildAt(i);\n            }\n        }   \n    }*/\n        \n    function upWind(){\n        wind = -0.73*grav;\n        cont.wind.removeAllChildren();\n        var windSprite1 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:50, y:50, scaleX:-1, scaleY:-1, rotation:10});                       \n		var windSprite2 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:200, y:300, scaleX:-1, scaleY:-1, rotation:10});        \n		var windSprite3 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:500, y:300, scaleX:-1, scaleY:-1, rotation:10});        \n        cont.wind.addChild(windSprite1,windSprite2,windSprite3);\n	}\n         \n    function downWind(){\n        wind = 2*grav;\n        cont.wind.removeAllChildren();\n		var windSprite1 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:50, y:50, rotation:10});				\n        var windSprite2 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:270, y:170, rotation:10});				\n		var windSprite3 = helpers.createSprite(SpriteSheetData.wind, \"cycle\", \n				{x:700, y:400, rotation:10});\n				        \n        cont.wind.addChild(windSprite1,windSprite2,windSprite3);\n    }\n    \n    function noWind(){\n        wind = 0;\n        cont.wind.removeAllChildren();\n    }\n    \n    function spawnGoose(x,y){\n		var goose = helpers.createSprite(SpriteSheetData.enemybirds, \"goose\", \n			{x:x, y:y, scaleX:0.8, scaleY:0.8});        \n        cont.goose.addChild(goose);\n    }\n    \n    function spawnSeagull(x,y){\n        var seagull = helpers.createSprite(SpriteSheetData.enemybirds, \"seagull\", \n			{x:x, y:y, scaleX:0.8, scaleY:0.8});\n        cont.sg.addChild(seagull);\n    }\n    \n    function spawnAttackBird(type,x,y){        \n        var attackBird = new AttackBird(new createjs.SpriteSheet(SpriteSheetData.enemybirds),type);\n        attackBird.x = x;\n        attackBird.y = y;\n        if(type===\"duck\"){\n            attackBird.scaleX=-attackBird.scaleX;\n        }\n        cont.attackBird.addChild(attackBird);\n        cont.collisionCheckDebug.addChild(attackBird.shape);\n    }\n    \n    function updateAttackBird(event){        \n        for (var i = 0, arrayLength = cont.attackBird.children.length; i < arrayLength; i++) {\n            var kid = cont.attackBird.children[i];\n            kid.update(CatzRocket.catzRocketContainer.x,CatzRocket.catzRocketContainer.y,event);\n            moveAndCollisionCheck(kid,event);\n            kid.updateCircle();\n            catzCollisionCheck(kid);\n            if(flameCollisionCheck(kid)){\n                kid.temperature+=event.delta; \n                if(kid.temperature>200 && kid.state!==\"grilled\"){\n                    kid.setGrilled();\n                    gameStats.kills +=1;\n                }\n            }\n            else if(kid.temperature>=0){\n                kid.temperature-=event.delta; \n                if(kid.temperature<0){\n                    kid.temperature=0;\n                }\n            }\n        }   \n    }        \n    \n    function hideSmoke(){\n        smoke.alpha = 0;\n    }\n    \n    function hideExitSmoke(){\n        exitSmoke.alpha = 0;\n    }            \n    \n    //hittar de globala x-y koordinaterna till hörnen på raketen, samt normalvektorer\n    function updateVertices(){\n        var s = Math.sin(CatzRocket.catzRocketContainer.rotation*Math.PI/180);\n        var c = Math.cos(CatzRocket.catzRocketContainer.rotation*Math.PI/180);\n        if(CatzRocket.hasFrenzy()){\n            var x = CatzRocket.catzRocketContainer.x+70*c-13*s;\n            var y = CatzRocket.catzRocketContainer.y+13*c+70*s;\n            var h = (newBounds.height/2)+5;\n            var w = (newBounds.width/2)+10;\n        }\n        else{\n            var x = CatzRocket.catzRocketContainer.x-10*c-13*s;\n            var y = CatzRocket.catzRocketContainer.y+13*c-10*s;\n            var h = (newBounds.height/2);\n            var w = (newBounds.width/2);\n        }\n		\n		polygonVertices[0].x=x-w*c-h*s;\n        polygonVertices[0].y=y+h*c-w*s;\n        polygonVertices[1].x=x-w*c+h*s;\n        polygonVertices[1].y=y-h*c-w*s;\n        polygonVertices[2].x=x+w*c+h*s;\n        polygonVertices[2].y=y-h*c+w*s;\n        polygonVertices[3].x=x+(w+newBounds.nose)*c;\n        polygonVertices[3].y=y+(w+newBounds.nose)*s;\n        polygonVertices[4].x=x+w*c-h*s;\n        polygonVertices[4].y=y+h*c+w*s;\n        \n        norm[0].x =-(polygonVertices[0].y-polygonVertices[1].y)/newBounds.height;\n        norm[0].y =-(polygonVertices[1].x-polygonVertices[0].x)/newBounds.height;\n        norm[1].x =-(polygonVertices[1].y-polygonVertices[2].y)/newBounds.width;\n        norm[1].y =-(polygonVertices[2].x-polygonVertices[1].x)/newBounds.width;\n        norm[2].x =-(polygonVertices[2].y-polygonVertices[3].y)/newBounds.noseLen;\n        norm[2].y =-(polygonVertices[3].x-polygonVertices[2].x)/newBounds.noseLen;\n        norm[3].x =-(polygonVertices[3].y-polygonVertices[4].y)/newBounds.noseLen;\n        norm[3].y =-(polygonVertices[4].x-polygonVertices[3].x)/newBounds.noseLen;\n        \n        if(CatzRocket.isWounded){\n            var x = CatzRocket.catzRocketContainer.x-55*c+3*s;\n            var y = CatzRocket.catzRocketContainer.y-3*c-55*s;\n        }\n        else{\n            var x = CatzRocket.catzRocketContainer.x-5*c+3*s;\n            var y = CatzRocket.catzRocketContainer.y-3*c-5*s;\n        }\n        var h = (catzBounds.height/2);\n        var w = (catzBounds.width/2);\n        catzVertices[0].x=x-w*c-h*s;\n        catzVertices[0].y=y+h*c-w*s;\n        catzVertices[1].x=x-w*c+h*s;\n        catzVertices[1].y=y-h*c-w*s;\n        catzVertices[2].x=x+w*c+h*s;\n        catzVertices[2].y=y-h*c+w*s;\n        catzVertices[3].x=x+w*c-h*s;\n        catzVertices[3].y=y+h*c+w*s;\n        \n        catzNorm[0].x =(catzVertices[0].y-catzVertices[1].y)/catzBounds.height;\n        catzNorm[0].y =(catzVertices[1].x-catzVertices[0].x)/catzBounds.height;\n        catzNorm[1].x =(catzVertices[1].y-catzVertices[2].y)/catzBounds.width;\n        catzNorm[1].y =(catzVertices[2].x-catzVertices[1].x)/catzBounds.width;\n        \n        if(CatzRocket.hasFrenzy()){\n            var x = CatzRocket.catzRocketContainer.x+55*c-13*s;\n            var y = CatzRocket.catzRocketContainer.y+13*c+55*s;\n        }\n        else{\n            var x = CatzRocket.catzRocketContainer.x-40*c-13*s;\n            var y = CatzRocket.catzRocketContainer.y+13*c-40*s;\n        }\n        var h = (flameBounds.height/2);\n        var w = (flameBounds.width);\n        flameVertices[0].x=x-h*s;\n        flameVertices[0].y=y+h*c;\n        flameVertices[1].x=x+h*s;\n        flameVertices[1].y=y-h*c;\n        flameVertices[2].x=x-w*c;\n        flameVertices[2].y=y-w*s;\n        flameNorm[0].x =(flameVertices[0].y-flameVertices[1].y)/flameBounds.height;\n        flameNorm[0].y =(flameVertices[1].x-flameVertices[0].x)/flameBounds.height;\n        flameNorm[1].x =-(flameVertices[0].y-flameVertices[2].y)/flameBounds.length;\n        flameNorm[1].y =-(flameVertices[2].x-flameVertices[0].x)/flameBounds.length;\n        flameNorm[2].x =(flameVertices[1].y-flameVertices[2].y)/flameBounds.length;\n        flameNorm[2].y =(flameVertices[2].x-flameVertices[1].x)/flameBounds.length;\n    }        \n    \n    function moveAndCollisionCheck(bird,event){\n        var isCollide = collisionCheck(bird);\n        var dispX = bird.velocityX*event.delta/1000;\n        var dispY = bird.velocityY*event.delta/1000;\n        if(dispX>bird.rad/2 || dispY>bird.rad/2 ){\n            var noSteps = Math.min(2*Math.max(dispX,dispY)/bird.rad,4);\n            for(var i=0; i<noSteps;i++){\n                bird.x += dispX/noSteps;\n                bird.y += dispY/noSteps;\n                isCollide = collisionCheck(bird);\n                if(isCollide){\n                    dispX = bird.velocityX*event.delta/1000;\n                    dispY = bird.velocityY*event.delta/1000;\n                }\n            }\n        }\n        else{\n            bird.x += dispX;\n            bird.y += dispY;\n            isCollide = collisionCheck(bird);\n        }\n        return isCollide;\n    }\n    \n    function collisionCheck(bird){\n        var groundLevel=430;\n        if(Math.abs(bird.x-CatzRocket.catzRocketContainer.x)<200 \n                && Math.abs(bird.y-CatzRocket.catzRocketContainer.y)<150){\n            var minOverlapNorm = 0;\n            var minOverlapDist=Infinity;\n            for(var i=0, max=norm.length; i<max;i++){\n                var proj1 = norm[i].x*polygonVertices[norm[i].vert1].x+\n                        norm[i].y*polygonVertices[norm[i].vert1].y;\n                var proj2 = norm[i].x*polygonVertices[norm[i].vert2].x+\n                        norm[i].y*polygonVertices[norm[i].vert2].y;\n                var projC = norm[i].x*bird.x+norm[i].y*bird.y;\n                if(projC-Math.max(proj1,proj2)>bird.rad || Math.min(proj1,proj2)-projC>bird.rad){\n                    if(bird.y<groundLevel)                    \n                        return false;                                           \n                    else                    \n                        collisionResolve(bird,0,-1,bird.y-groundLevel,true);                                   \n                }\n                if(bird.rad-projC+Math.max(proj1,proj2)<Math.abs(minOverlapDist)){\n                    minOverlapDist= bird.rad-projC+Math.max(proj1,proj2);\n                    minOverlapNorm = i;\n                }\n                if(bird.rad-Math.min(proj1,proj2)+projC<Math.abs(minOverlapDist)){\n                    minOverlapDist=-bird.rad+Math.min(proj1,proj2)-projC;\n                    minOverlapNorm = i;\n                }\n            }\n            var closestVertex=0;\n            var minDist=Infinity;\n            for(var i=0, max=polygonVertices.length; i<max;i++){\n                var dist = Math.pow((polygonVertices[i].x-bird.x),2)\n                        +Math.pow((polygonVertices[i].y-bird.y),2);\n                if(dist<minDist){\n                    closestVertex=i;\n                    minDist=dist;\n                }\n            }\n            var x= bird.x-polygonVertices[closestVertex].x;\n            var y= bird.y-polygonVertices[closestVertex].y;\n            var normX = x/Math.sqrt(y*y+x*x);\n            var normY = y/Math.sqrt(y*y+x*x);\n            var projMin = Infinity;\n            var projMax = -Infinity;\n            for(var i=0,max=polygonVertices.length; i<max;i++){\n                var proj = normX*polygonVertices[i].x+normY*polygonVertices[i].y;\n				if(proj<projMin)                    \n					projMin=proj;                    \n				if (proj>projMax)                    \n					projMax=proj;                                        \n            } \n            projC = normX*bird.x+normY*bird.y;\n            if(projC-projMax>bird.rad || projMin-projC>bird.rad){\n                if(bird.y<groundLevel)                \n                    return false;                                       \n                else                \n                    collisionResolve(bird,0,-1,bird.y-groundLevel,true);                 \n            }\n            else if(bird.rad-projC+projMax<Math.abs(minOverlapDist)){\n                minOverlapDist = bird.rad-projC+projMax;\n                collisionResolve(bird,normX,normY,minOverlapDist,false);                \n            }\n            else if( bird.rad-projMin+projC<Math.abs(minOverlapDist)){\n                minOverlapDist = -bird.rad+projMin-projC;\n                collisionResolve(bird,normX,normY,minOverlapDist,false);                \n            }\n            else{\n                collisionResolve(bird,norm[minOverlapNorm].x,norm[minOverlapNorm].y,minOverlapDist,false);                \n            }\n            return true;\n        }\n        else\n			return false;\n    }\n    \n    //enklare, snabbare variant av kollisionhanteringen som kan användas vid tex diamanplockning\n    function overlapCheckCircle(x,y,r){\n        for(var i=0, max=norm.length; i<max;i++){\n            var proj1 = norm[i].x*polygonVertices[norm[i].vert1].x+\n                    norm[i].y*polygonVertices[norm[i].vert1].y;\n            var proj2 = norm[i].x*polygonVertices[norm[i].vert2].x+\n                    norm[i].y*polygonVertices[norm[i].vert2].y;\n            var projC = norm[i].x*x+norm[i].y*y;\n            if(projC-Math.max(proj1,proj2)>r || Math.min(proj1,proj2)-projC>r)            \n                return false;            \n        }\n        return true;\n    }\n    \n    function catzCollisionCheck(bird){\n        for(var i=0, max=catzNorm.length; i<max;i++){\n            var proj1 = catzNorm[i].x*catzVertices[catzNorm[i].vert1].x+\n                    catzNorm[i].y*catzVertices[catzNorm[i].vert1].y;\n            var proj2 = catzNorm[i].x*catzVertices[catzNorm[i].vert2].x+\n                    catzNorm[i].y*catzVertices[catzNorm[i].vert2].y;\n            var projC = catzNorm[i].x*bird.x+catzNorm[i].y*bird.y;\n            if(projC-Math.max(proj1,proj2)>bird.rad || Math.min(proj1,proj2)-projC>bird.rad)       \n                return false;\n        }                 \n		if(!debugOptions.godMode &&CatzRocket.getHit(false)) \n			catzFellOfRocket();            \n        return true;\n    }\n    \n    function flameCollisionCheck(bird)\n    {\n        if(1===CatzRocket.rocketFlame.alpha){\n            for(var i=0,max=flameNorm.length; i<max;i++){\n                var proj1 = flameNorm[i].x*flameVertices[flameNorm[i].vert1].x+\n                        flameNorm[i].y*flameVertices[flameNorm[i].vert1].y;\n                var proj2 = flameNorm[i].x*flameVertices[flameNorm[i].vert2].x+\n                        flameNorm[i].y*flameVertices[flameNorm[i].vert2].y;\n                var projC = flameNorm[i].x*bird.x+flameNorm[i].y*bird.y;\n                if(projC-Math.max(proj1,proj2)>bird.rad || Math.min(proj1,proj2)-projC>bird.rad)                \n                    return false;                \n            }\n            return true;\n        }\n        else       \n            return false;        \n    }\n    \n    function sign(x) {\n		x = +x; // convert to a number\n		if (x === 0 || isNaN(x))    \n			return x;    \n		return x > 0 ? 1 : -1;\n	}\n    \n     function collisionResolve(bird,normX,normY,normDist,isGround){ \n        if(isGround || CatzRocket.canCollide()){\n            bird.x+=normX*normDist*2;\n            bird.y+=normY*normDist*2;\n            normX=normX*sign(normDist);\n            normY=normY*sign(normDist);\n            lastResolveNorm[0]=normX;\n            lastResolveNorm[1]=normY;\n            var reflect = -2.5*(normX*bird.velocityX+normY*bird.velocityY);\n            bird.velocityX+=reflect*normX;\n            bird.velocityY+=reflect*normY;\n			CatzRocket.catzVelocity-=bird.weight*reflect*normY/150;\n			CatzRocket.catzRocketContainer.y-=bird.weight*reflect*normY/400;\n			var rand = Math.floor(2*Math.random()+3);\n			var name = \"klonk\"+rand;\n			var instance = createjs.Sound.play(name);\n			instance.volume=0.15;\n            if(squawkSound.playState !== createjs.Sound.PLAY_SUCCEEDED){\n                rand = Math.floor(3*Math.random()+1);\n                name = \"squawk\"+rand;\n                squawkSound = createjs.Sound.play(name);\n                squawkSound.volume=0.15;\n            }\n        }\n        else if(CatzRocket.hasFrenzy()){\n            bird.setGrilled();\n            gameStats.kills +=1;\n        }\n    }\n   \n    function drawCollisionModels(){\n        polygonLine.graphics = new createjs.Graphics();\n        polygonLine.x=0;\n        polygonLine.y=0;\n        for (var i = 0, max=polygonVertices.length; i<max ; i++) {\n            polygonLine.graphics.setStrokeStyle(2,1);\n            polygonLine.graphics.beginStroke(\"black\");\n            polygonLine.graphics.moveTo(polygonVertices[i].x,polygonVertices[i].y);\n            if(i===polygonVertices.length-1)            \n                polygonLine.graphics.lineTo( polygonVertices[0].x, polygonVertices[0].y);            \n            else            \n                polygonLine.graphics.lineTo( polygonVertices[i+1].x, polygonVertices[i+1].y);\n            polygonLine.graphics.endStroke();\n        } \n        for (var i = 0, max=catzVertices.length; i<max; i++) {\n            polygonLine.graphics.setStrokeStyle(2,1);\n            polygonLine.graphics.beginStroke(\"red\");\n            polygonLine.graphics.moveTo(catzVertices[i].x,catzVertices[i].y);\n            if(i===catzVertices.length-1)            \n                polygonLine.graphics.lineTo( catzVertices[0].x, catzVertices[0].y);            \n            else            \n                polygonLine.graphics.lineTo( catzVertices[i+1].x, catzVertices[i+1].y);            \n            polygonLine.graphics.endStroke();\n        } \n                \n        for (var i = 0, max=flameVertices.length; i<max; i++){\n            polygonLine.graphics.setStrokeStyle(2,1);\n            polygonLine.graphics.beginStroke(\"green\");\n            polygonLine.graphics.moveTo(flameVertices[i].x,flameVertices[i].y);\n            if(i===flameVertices.length-1)            \n                polygonLine.graphics.lineTo( flameVertices[0].x, flameVertices[0].y);            \n            else            \n                polygonLine.graphics.lineTo( flameVertices[i+1].x, flameVertices[i+1].y);            \n            polygonLine.graphics.endStroke();\n        } \n        polygonLine.graphics.setStrokeStyle(2,2);\n        polygonLine.graphics.beginStroke(\"pink\");\n        polygonLine.graphics.moveTo(\n                CatzRocket.catzRocketContainer.x,\n                CatzRocket.catzRocketContainer.y);\n        polygonLine.graphics.lineTo(\n                CatzRocket.catzRocketContainer.x+lastResolveNorm[0]*100,\n                CatzRocket.catzRocketContainer.y+lastResolveNorm[1]*100);\n        polygonLine.graphics.endStroke();\n    }        \n    \n    function catzFellOfRocket(){\n        stage.removeAllEventListeners();\n        createjs.Tween.removeTweens(CatzRocket.rocket);\n        createjs.Tween.get(CatzRocket.rocket).to({x:800},800);\n    }\n    \n    function crash(){		   \n        currentTrack=0;\n        currentLevel=0;                \n        cont.lightning.removeAllChildren();\n        cont.attackBird.removeAllChildren();\n        cont.diamond.removeAllChildren();\n        cont.onlooker.removeAllChildren();\n        setParallax(currentLevel);\n        directorState=directorStateEnum.Normal;        \n        noWind();                        \n        stage.removeAllEventListeners();\n        stage.removeChild(gameView);\n        stage.addChild(House.houseView);\n        House.subtractedDiamondCont.removeAllChildren();\n        House.removeCharacterEvents();\n        stage.update();\n        createjs.Ticker.setFPS(20);\n        createjs.Ticker.off(\"tick\", gameListener);\n        houseListener = createjs.Ticker.on(\"tick\", gameLogic.houseTick,this);\n        House.deactivateWick();     \n        createjs.Tween.removeTweens(House.houseView);        \n        if(debugOptions.trustFund && gameStats.score<20000)        \n            gameStats.score=20000;                 		\n		updatePointer();\n        bg.y = -1200;\n		bg.scaleX = 1;\n		bg.scaleY = 1;\n        cont.star.y=0;\n		cont.star.scaleX = 1;\n		cont.star.scaleY = 1;\n        gameView.y=0;\n        gameView.scaleX = 1;\n        gameView.scaleY = 1;\n        var instance = createjs.Sound.play(\"catzRocketCrash\");\n        instance.volume=0.5;\n        onTrack=false;        \n        createjs.Tween.get(House.houseView)\n                .wait(200)\n                .to({x:-50, y:20},50)\n                .to({x:50, y:-40},50)\n                .to({x:-50, y:50},50)\n                .to({x:20, y:-20},50)\n                .to({x:-10, y:10},50)\n                .to({x:10, y:-10},50)\n                .to({x:0, y:0},50)\n                .wait(800);\n        createjs.Tween.get(House.wick)\n            .wait(2000)\n            .to({x:-210},1500,createjs.Ease.quadInOut)\n            .call((function(){House.activateWick(gameLogic.gotoGameView);}))\n            .call(House.addCharacterEvents);\n			\n		if(CatzRocket.isHit)        \n            House.gotoHouseViewWithoutRocket();        \n        else        \n            House.gotoHouseViewWithRocket();                       \n		CatzRocket.reset();                                 \n        stage.update();     \n    }\n	\n	gameLogic.gotoGameView = function(){\n		gameStats.score = 0;\n        gameStats.currentRound += 1;\n        House.cricketsSound.stop();\n        //if song hasn't started yet\n        if(rocketSong.getPosition()<100)        \n            rocketSong.play({loop:-1});                \n        if(!debugOptions.debugMode){\n            cont.collisionCheckDebug.alpha=0;\n            debugText.alpha=0;\n        }\n        stage.removeChild(House.houseView);\n        stage.addChild(gameView, cont.wind, \n            //muteButton, \n            //hud, hudPointer, CatzRocket.glass, \n            diamondCounterText,debugText); \n//       muteButton.x=645;       \n        createjs.Ticker.off(\"tick\", houseListener);            \n		gameListener = createjs.Ticker.on(\"tick\", GameLogic.update,this);    \n        createjs.Ticker.setFPS(30);                    \n        CatzRocket.start(-20);\n\n        stage.addEventListener(\"stagemousedown\", function(){mousedown = true; CatzRocket.catzUp();});    \n        stage.addEventListener(\"stagemouseup\", function(){mousedown = false; CatzRocket.catzEndLoop();});    \n        \n        GameLogic.jump = false;        \n        paused = false;      \n        \n        if(!gameStats.hasBeenFirst.round) {\n            gameStats.hasBeenFirst.round = true;\n        }        \n        stage.update();                \n    }        \n	\n    return gameLogic;\n}());",
			"file": "HTML5Application/public_html/oh/js/game-logic.js",
			"file_size": 47132,
			"file_write_time": 130760677690682486,
			"settings":
			{
				"buffer_size": 46033,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"P",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"INSTAL",
				"Package Control: Install Package"
			],
			[
				"we",
				"Web Inspector"
			],
			[
				"packag",
				"Package Control: Install Package"
			]
		],
		"width": 386.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/levelEditor/LevelEditor.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/leveleditor.html",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/init.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/levelEditor/LevelManifest.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/levelEditor/LevelManifest",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/assets/new assets/sound/frenzy.mp3",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/about.html",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/spriteSheetData.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/ApplicationControl.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/helpers.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/gameLogic.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/RocketShip.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/House.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/index.html",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/TrackParts.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/OhLDStyle.css",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/levelEditor/init.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/LevelEditor.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/attackBirds.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/index.html",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/Tracks.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/dialog.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/CatzRocket.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/GameProgression.js",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/HTML5Application/public_html/oh/ClickableSprite.js",
		"/C/Users/Rasmus/Desktop/xss.html",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/constellation.xlsx",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/Catz story mode.docx",
		"/C/Users/Rasmus/Desktop/ext/src/inject/inject.js",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/Web Inspector/swi.sublime-settings",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/swi.sublime-settings",
		"/C/Users/Rasmus/Documents/GitHub/OhLookDiamonds/ohlookdiamonds.sublime-project",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/Node.sublime-build",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/JavaScript.sublime-settings",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/User/Distraction Free.sublime-settings",
		"/C/Users/Rasmus/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"false",
			"CatzRocket.c",
			"updateDiamond",
			"inGameMode",
			"update(",
			"CatzRocket.\ncatzRocketC",
			"mousedown",
			"update",
			"statemo",
			"mousedown",
			"pressmove",
			"()",
			"catzRocket",
			"selectItem",
			"state",
			"update()",
			"dbTex",
			"pressmove",
			"update()",
			"update",
			"track",
			"gameView",
			"SELECT(",
			"startPr",
			"select",
			"update",
			".on",
			"on.",
			"Event",
			"addE",
			"Cont.add",
			"Cont.on",
			"createSelectBox",
			"setEventListenersStateNormal",
			"setEve",
			"evt",
			"pageX",
			"startPre",
			"pressMove",
			"pressmove",
			"selectedCont.",
			"currentAnimation",
			"pressmove",
			" selectWithBox",
			"selectWit",
			"sele",
			"dragB",
			"greatD",
			"greate",
			"this",
			"graphic",
			"levelView",
			"createDiamond",
			"width",
			">>>",
			"catzRc",
			"diamondCounte",
			"diamondCounterTe",
			"spriteSheetData",
			"house.",
			"rehab",
			"muteButton",
			">>>>",
			">>>>>",
			">>>>",
			">>>>>>",
			"outfuelstate",
			"320",
			"console",
			"createLe",
			"bgOffset",
			"bird",
			"diCont",
			"diCOnt",
			"function eraseAndImport(evt){\n	objCont.removeAllChildren();\n}",
			"diCont",
			"createB",
			"createBird",
			"spawnAttackBird",
			"attackb",
			"fgTopCont.x",
			"<br",
			"<br>",
			"cons",
			"#",
			"updateDiamond",
			"		loopText = new createjs.Text(\"0\", \"32px Fauna One\", \"#000000\");\n		loopText.text = \"L\";\n		loopText.x = 170;\n		loopText.y = 2;\n		loopText.on(\"click\", createLoop);",
			"\n				if(kid.currentAnimation===\"greatCycle\")\n				{\n					type=\"greatDiamond\";\n				}",
			"createjs.Te",
			"diamond",
			"		if (evt.currentTarget.currentAnimation === \"cycle\")\n		{\n			diamond = helpers.createSprite(SpriteSheetData.mediumDiamond, \"mediumCycle\", \n			{x: x, y: y});\n		}",
			"createjs.Ticker",
			"queue",
			"stage",
			"rocketShip",
			"hobo",
			"onlookers",
			"catzState",
			"stateEnum",
			"statenum",
			"gotohouse",
			"scaleY",
			"highlight",
			"crash",
			"FellOff",
			"catzRocket.rocket",
			"catz.rocket",
			"glass",
			"updateFg",
			"glass",
			"subtractedDiamond",
			"rehab.x",
			"rehab",
			"            catzRocket.catzRocketContainer.x = 200+\n                        Math.cos((catzRocket.catzRocketContainer.rotation+90)/360*2*Math.PI)*160;\n            catzRocket.catzRocketContainer.y = 200+\n                        Math.sin((catzRocket.catzRocketContainer.rotation+90)/360*2*Math.PI)*210\n                +catzRocket.heightOffset;",
			"changeState",
			"catzFellOfRocket",
			"catzCollisionCheck",
			"collisionResolve",
			" =true",
			" =tre",
			"isH",
			"//}",
			"FellOffRocket",
			"glass",
			"house.update",
			"update",
			"houset",
			"houseListener"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SpriteSheetData",
			"bgCoordinates.offset",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "HTML5Application/public_html/oh/leveleditor.html",
					"settings":
					{
						"buffer_size": 2321,
						"regions":
						{
						},
						"selection":
						[
							[
								610,
								610
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 97.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "HTML5Application/public_html/oh/gameLogic.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14982.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "HTML5Application/public_html/oh/helpers.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 15.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "HTML5Application/public_html/oh/spriteSheetData.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5487.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "HTML5Application/public_html/oh/levelEditor/LevelManifest.js",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "HTML5Application/public_html/oh/js/application-control.js",
					"settings":
					{
						"buffer_size": 3449,
						"regions":
						{
						},
						"selection":
						[
							[
								2049,
								2049
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1119.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "HTML5Application/public_html/oh/js/level-editor.js",
					"settings":
					{
						"buffer_size": 12822,
						"regions":
						{
						},
						"selection":
						[
							[
								12591,
								12591
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6444.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "HTML5Application/public_html/oh/js/game-logic.js",
					"settings":
					{
						"buffer_size": 46033,
						"regions":
						{
						},
						"selection":
						[
							[
								434,
								434
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 32.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 28.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"game",
				"HTML5Application/public_html/oh/js/game-logic.js"
			],
			[
				"le",
				"HTML5Application/public_html/oh/js/level-editor.js"
			],
			[
				"a",
				"HTML5Application/public_html/oh/js/application-control.js"
			],
			[
				"sprite",
				"HTML5Application/public_html/oh/spriteSheetData.js"
			],
			[
				"in",
				"HTML5Application/public_html/oh/init.js"
			],
			[
				"lev",
				"HTML5Application/public_html/oh/levelEditor/LevelEditor.js"
			],
			[
				"leve",
				"HTML5Application/public_html/oh/levelEditor/LevelEditor.js"
			],
			[
				"fre",
				"HTML5Application/public_html/oh/assets/new assets/sound/frenzy.mp3"
			],
			[
				"",
				"HTML5Application/public_html/oh/levelEditor/LevelEditor.js"
			],
			[
				"l",
				"HTML5Application/public_html/oh/leveleditor.html"
			],
			[
				"gam",
				"HTML5Application/public_html/oh/gameLogic.js"
			],
			[
				"s",
				"HTML5Application/public_html/oh/spriteSheetData.js"
			],
			[
				"spri",
				"HTML5Application/public_html/oh/spriteSheetData.js"
			],
			[
				"sp",
				"HTML5Application/public_html/oh/spriteSheetData.js"
			],
			[
				"helper",
				"HTML5Application/public_html/oh/helpers.js"
			],
			[
				"he",
				"HTML5Application/public_html/oh/helpers.js"
			],
			[
				"hel",
				"HTML5Application/public_html/oh/helpers.js"
			],
			[
				"ho",
				"HTML5Application/public_html/oh/House.js"
			],
			[
				"r",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"rok",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"h",
				"HTML5Application/public_html/oh/House.js"
			],
			[
				"ind",
				"HTML5Application/public_html/oh/index.html"
			],
			[
				"att",
				"HTML5Application/public_html/oh/attackBirds.js"
			],
			[
				"inde",
				"HTML5Application/public_html/index.html"
			],
			[
				"house",
				"HTML5Application/public_html/oh/House.js"
			],
			[
				"track",
				"HTML5Application/public_html/oh/TrackParts.js"
			],
			[
				"trac",
				"HTML5Application/public_html/oh/Tracks.js"
			],
			[
				"click",
				"HTML5Application/public_html/oh/ClickableSprite.js"
			],
			[
				"roc",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"ca",
				"HTML5Application/public_html/oh/CatzRocket.js"
			],
			[
				"cat",
				"HTML5Application/public_html/oh/CatzRocket.js"
			],
			[
				"at",
				"HTML5Application/public_html/oh/attackBirds.js"
			],
			[
				"rock",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"ro",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"rocke",
				"HTML5Application/public_html/oh/RocketShip.js"
			],
			[
				"catzr",
				"HTML5Application/public_html/oh/CatzRocket.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 269.0,
	"status_bar_visible": true
}
